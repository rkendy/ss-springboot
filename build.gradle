plugins {
	id 'org.springframework.boot' version '2.3.9.RELEASE'
	id 'io.spring.dependency-management' version '1.0.11.RELEASE'
	id 'java'
	id 'jacoco'
}

group = 'br.uff.ihs'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '11'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	jacocoRuntime
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-data-ldap'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-validation'
	implementation 'org.liquibase:liquibase-core:4.3.1'
	implementation "io.springfox:springfox-boot-starter:3.0.0"
	compileOnly 'org.projectlombok:lombok'
	compile 'io.springfox:springfox-swagger-ui'
	compile 'org.modelmapper:modelmapper:2.3.8'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'mysql:mysql-connector-java'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation('org.springframework.boot:spring-boot-starter-test') {
		exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
	}
	testImplementation 'org.springframework.security:spring-security-test'

	// JWT:
	compile 'io.jsonwebtoken:jjwt-api:0.11.2'
	runtime 'io.jsonwebtoken:jjwt-impl:0.11.2', 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// To fix error running unit test (Login): cannot retry due to server authentication, in streaming mode
	testRuntimeOnly group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.11'



}

test {
	useJUnitPlatform()  {
        finalizedBy jacocoTestReport // report is always generated after tests run
        testLogging {
            events 'passed', 'skipped', 'failed'
        }
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
}


/**
 * Generate classes for Crud for 'ModelName' entity.
 * Usage: gradle generate -Dmodel=ModelName
 */
task generate() {

	ext.generateFile = { filename, destination -> 
		println "\tGenerating $filename at $destination ..."
		copy {
			from './src/crud-template/' + filename
			into destination
			rename 'Model(.*)', modelName + '$1'
			filter { String line -> 
				line.replaceAll('\\$Model\\$', modelName)
					.replaceAll('\\$model\\$', modelName.toLowerCase())
			}
		}
	}

	ext.modelName = System.getProperty("model")
	doLast {
		println "Generating Crud files for model $modelName:"
		generateFile('Model.java', './src/main/java/br/uff/ihs/ss/model')
		generateFile('ModelController.java', './src/main/java/br/uff/ihs/ss/controller')
		generateFile('ModelControllerTest.java', './src/test/java/br/uff/ihs/ss/controller')
		generateFile('ModelControllerTestIT.java', './src/test/java/br/uff/ihs/ss/controller')
		generateFile('ModelDto.java', './src/main/java/br/uff/ihs/ss/dto')
		generateFile('ModelRepository.java', './src/main/java/br/uff/ihs/ss/repository')
		generateFile('ModelRepositoryTest.java', './src/test/java/br/uff/ihs/ss/repository')
		generateFile('ModelService.java', './src/main/java/br/uff/ihs/ss/service')
		generateFile('ModelServiceImpl.java', './src/main/java/br/uff/ihs/ss/service/impl')
		generateFile('ModelServiceTest.java', './src/test/java/br/uff/ihs/ss/service')
		generateFile('ModelTestHelper.java', './src/test/java/br/uff/ihs/ss/helper')
	}
}